
scala> object Y { def f[A](a: => A) = 1 ; def f[A](a: => Either[Exception, A]) = 2 }
                                              ^
       error: double definition:
       def f[A](a: => A): Int at line 10 and
       def f[A](a: => Either[Exception,A]): Int at line 10
       have same type after erasure: (a: Function0)Int

scala> object Y { def f[A](a: => A) = 1 ; def f[A](a: => Either[Exception, A]) = 2 }
                                              ^
       error: double definition:
       def f[A](a: => A): Int at line 10 and
       def f[A](a: => Either[Exception,A]): Int at line 10
       have same type after erasure: (a: Function0)Int

scala> object Y {
     |   def f[A](a: =>  A) = 1
     |   def f[A](a: => Either[Exception, A]) = 2
     | }
         def f[A](a: => Either[Exception, A]) = 2
             ^
On line 3: error: double definition:
       def f[A](a: => A): Int at line 11 and
       def f[A](a: => Either[Exception,A]): Int at line 12
       have same type after erasure: (a: Function0)Int

scala> :pa
// Entering paste mode (ctrl-D to finish)

object Y {
  def f[A](a: =>  A) = 1
  def f[A](a: => Either[Exception, A]) = 2
}

// Exiting paste mode, now interpreting.


         def f[A](a: => Either[Exception, A]) = 2
             ^
<pastie>:3: error: double definition:
       def f[A](a: => A): Int at line 11 and
       def f[A](a: => Either[Exception,A]): Int at line 12
       have same type after erasure: (a: Function0)Int

scala> :quit
