
scala> import language.experimental.macros
import language.experimental.macros

scala> import scala.reflect.macros.blackbox.Context
import scala.reflect.macros.blackbox.Context

scala> 

scala> object Impls {
  def foo(c: Context)(x: c.Expr[Int]) = {
    import c.universe._
    val body = Apply(Select(x.tree, TermName("$plus")), List(Literal(Constant(1))))
    c.Expr[Int](body)
  }

  def bar(c: Context)(x: c.Expr[Int]) = {
    import c.universe._
    val body = Apply(Select(x.tree, TermName("$plus")), List(Literal(Constant(2))))
    c.Expr[Int](body)
  }

  def quux(c: Context)(x: c.Expr[Int]) = {
    import c.universe._
    val body = Apply(Select(x.tree, TermName("$plus")), List(Literal(Constant(3))))
    c.Expr[Int](body)
  }
}
defined object Impls

scala> object Macros {
  object Shmacros {
    def foo(x: Int): Int = macro Impls.foo
  }
  def bar(x: Int): Int = macro Impls.bar
}; class Macros {
  def quux(x: Int): Int = macro Impls.quux
}
           def foo(x: Int): Int = macro Impls.foo
               ^
On line 3: error: macro definition needs to be enabled
       by making the implicit value scala.language.experimental.macros visible.
       This can be achieved by adding the import clause 'import scala.language.experimental.macros'
       or by setting the compiler option -language:experimental.macros.
       See the Scaladoc for value scala.language.experimental.macros for a discussion
       why the feature needs to be explicitly enabled.
         def bar(x: Int): Int = macro Impls.bar
             ^
On line 5: error: macro definition needs to be enabled
       by making the implicit value scala.language.experimental.macros visible.
         def quux(x: Int): Int = macro Impls.quux
             ^
On line 7: error: macro definition needs to be enabled
       by making the implicit value scala.language.experimental.macros visible.

scala> 

scala> import Macros.Shmacros._
              ^
       error: not found: value Macros

scala> println(foo(2) + Macros.bar(2) * new Macros().quux(4))
               ^
       error: not found: value foo
                        ^
       error: not found: value Macros
                                            ^
       error: not found: type Macros

scala> :quit
